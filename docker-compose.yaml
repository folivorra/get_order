services:
  app:
    build: .
    container_name: get_order
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - postgres
      - kafka
    networks:
      - my-network

  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my-network

  goose:
    build: tools/goose
    container_name: goose
    depends_on:
      - postgres
    volumes:
      - ./migrations:/migrations
    entrypoint: [ "/goose/entrypoint.sh" ]
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: app
      DB_PASSWORD: app
    networks:
      - my-network

  kafka:
    image: bitnami/kafka:4.0.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_KRAFT_CLUSTER_ID: CpQbOs5GTPODPPwiF-spKw
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - my-network

volumes:
  postgres_data:
  kafka_data:

networks:
  my-network: